install.packages("miktex")
install.packages("installr")
library(installr)
updateR()
# set working directory setwd("")
setwd("C:/Users/p_lae/OneDrive - uzh.ch/Dokumente/Universität Zürich/12. Semester/Empirical Finance/Code")
# set working directory setwd("")
setwd("C:/Users/p_lae/OneDrive - Universität Zürich UZH/Dokumente/Universität Zürich/12. Semester/Empirical Finance/Code")
############
# Packages #
############
# install the packages by using the install.packages("name_of_package") function.
#install.packages("xts")
#install.packages("PerformanceAnalytics")
#install.packages("psych")
# the xts package contains time-series functions, things like reading the data and associating each observation
# with a date
library(xts)
# the PerformanceAnalytics package allows for the calculation of returns and econometric functions for performance
# evaluation
library(PerformanceAnalytics)
# The psych package is meant to produce the most frequently requested stats and display them in an easy to read
# data frame
library(psych)
# <- defines the variable
# read is a function .delim implies the file is delimited
# file  is the dataset, R can easily also import csv and xls files (but you need to use different functions then)
# the option header=TRUE indicates that the first row is variable names
# sep = '' indicates that data are separated by a space
# dec = '.' indicates that the decimal point is given by .
prices <- read.delim(file = './Data/EF_data_SMI_prices_mon.txt', header = TRUE, sep = '\t', dec = '.')
setwd("C:/Users/p_lae/OneDrive - Universität Zürich UZH/Dokumente/Universität Zürich/12. Semester/Empirical Finance/EmpiricalFinance/Assignment 1")
# load libraries
library(xts)
library(PerformanceAnalytics)
library(psych)
###############
# Data import #
###############
prices <- read.delim(file = 'A1_dataset_01.txt', header = TRUE, sep = '\t', dec = '.')
returns <- read.delim(file = 'A1_dataset_02.txt', header = TRUE, sep = '\t', dec = '.')
interest_rates <- read.delim(file = 'A1_dataset_03.txt', header = TRUE, sep = '\t', dec = '.')
market_values <- read.delim(file = 'A1_dataset_04.txt', header = TRUE, sep = '\t', dec = '.')
cpi <- read.delim(file = 'A1_dataset_05.txt', header = TRUE, sep = '\t', dec = '.')
View(prices[,1])
date <- as.Date(prices[,1])
prices.ts <- xts(x = prices[,-1], order.by = date)
returns_results <- Return.calculate(prices = prices.ts, method = 'discrete')
# ii)
portfolio_EW_returns <- rowMeans(returns_results, na.rm=TRUE)
portfolio_EW_returnsts <- xts(portfolio_EW_returns, order.by = date)
portfolio_EW <- portfolio_EW_returnsts[-1,]
mean_return_EW <- mean(portfolio_EW)
pf_annualized <- (((1+mean_return_EW)^12)-1)
mean(pf_annualized)
max_novartis <-market_values[which.max(market_values$Novartis_I),]
print(max_novartis[c("Date","Novartis_I")])
max_nestle <-market_values[which.max(market_values$Nestle_I),]
print(max_nestle[c("Date","Nestle_I")])
max_roche <-market_values[which.max(market_values$Roche_Holding),]
print(max_roche[c("Date","Roche_Holding")])
max_ubs <-market_values[which.max(market_values$UBS_I),]
print(max_ubs[c("Date","UBS_I")])
MC_monthly <- xts(x = market_values[,-1], order.by = date)
# Create a vector of the total market cap of the index for a given month
totMC_monthly <- rowSums(MC_monthly, na.rm = TRUE)
#Compute weights
VW_weights <- MC_monthly / totMC_monthly
#Lag marketcap
lag_VW_weights <- lag.xts(VW_weights, 1)
#Now we multiply the weights by the returns
vw_returns <- lag_VW_weights * returns_results
#Now we sum this across all stock to get the portfolio return
portfolio_VW_returns <- rowSums(vw_returns, na.rm = TRUE)
portfolio_VW_returnsts <- xts(portfolio_VW_returns, order.by = date)
#Drop the first row since that should be missing
portfolio_VW <- portfolio_VW_returnsts[-1,]
mean_return_VW <- mean(portfolio_VW)
pf_annualized <- (((1+mean_return_VW)^12)-1)
print(prod(1 + portfolio_VW_returnsts['1988-06-30/2000-12-29']))
print(prod(1 + portfolio_EW_returnsts['1988-06-30/2000-12-29']))
print(prod(1 + portfolio_VW_returnsts['2000-12-29/2021-02-26']))
print(prod(1 + portfolio_EW_returnsts['2000-12-29/2021-02-26']))
print(prod(1 + portfolio_VW_returnsts['1998-07-31/2012-12-31']))
print(prod(1 + portfolio_EW_returnsts['1998-07-31/2012-12-31']))
print(prod(1 + portfolio_VW_returnsts['2007-05-31/2017-12-29']))
print(prod(1 + portfolio_EW_returnsts['2007-05-31/2017-12-29']))
print(prod(1 + portfolio_VW_returnsts['2011-08-31/2020-01-31']))
print(prod(1 + portfolio_EW_returnsts['2011-08-31/2020-01-31']))
maxDrawdown(portfolio_VW_returnsts['1988-06-30/2000-12-29'])
maxDrawdown(portfolio_EW_returnsts['1988-06-30/2000-12-29'])
maxDrawdown(portfolio_VW_returnsts['2000-12-29/2020-01-31'])
maxDrawdown(portfolio_EW_returnsts['2000-12-29/2020-01-31'])
maxDrawdown(portfolio_VW_returnsts['2020-02-28/2020-02-26'])
maxDrawdown(portfolio_EW_returnsts['2020-02-28/2020-02-26'])
mean(pf_annualized)
pf_annualized_EW <- (((1+mean_return_EW)^12)-1)
pf_annualized_VW <- (((1+mean_return_VW)^12)-1)
# calculate annualized standard deviation for equal and value weighted returns
pf_annualized_std_EW <- StdDev(portfolio_EW)*sqrt(12)
View(pf_annualized_std_EW)
# calculate annualized standard deviation for equal and value weighted returns
pf_annualized_std_EW <- sd(portfolio_EW)*sqrt(12)
pf_annualized_std_VW <- sd(portfolio_VW)*sqrt(12)
?Return.calculate
?rollapplyr
View(portfolio_EW)
?diff
