setwd("~/GitHub/EmpiricalFinance/Assignment 3")
library(xts)
library(PerformanceAnalytics)
library(psych)
library(roll)
library(data.table)
###############
# Data import #
###############
prices <- read.delim(file = 'A3_dataset_01.txt', header = TRUE, sep = '\t', dec = '.')
SMI_monthly <- read.delim(file = 'A3_dataset_02.txt', header = TRUE, sep = '\t', dec = '.')
interest_rates <- read.delim(file = 'A2_dataset_03.txt', header = TRUE, sep = '\t', dec = '.')
# # create monthly returns for stocks and SMI
date <- as.Date(prices[,1], format = "%d.%m.%Y")
prices.ts <- xts(x = prices[,-1], order.by = date)
#View(prices.ts)
returns <- Return.calculate(prices = prices.ts, method = 'discrete')
#
SMI_monthly <- xts(SMI_monthly[,-1], order.by = as.Date(SMI_monthly$Date, format = "%d.%m.%Y"))
#View(SMI_monthly)
SMI_TotRet_mon <- Return.calculate(SMI_monthly)
#
# # turn interest_rates into ts and divide by 100 because it is in percentages and turn into monthly rates
interest_rates <- xts(interest_rates[,-1], order.by = as.Date(interest_rates$Date,  format = "%d.%m.%Y"))
#View(interest_rates)
interest_rates_mon <- ((1+interest_rates/100)^(1/12)-1)
prices <- read.delim(file = 'A3_dataset_01.txt', header = TRUE, sep = '\t', dec = '.')
SMI_monthly <- read.delim(file = 'A3_dataset_02.txt', header = TRUE, sep = '\t', dec = '.')
interest_rates <- read.delim(file = 'A3_dataset_03.txt', header = TRUE, sep = '\t', dec = '.')
# # create monthly returns for stocks and SMI
date <- as.Date(prices[,1], format = "%d.%m.%Y")
prices.ts <- xts(x = prices[,-1], order.by = date)
#View(prices.ts)
returns <- Return.calculate(prices = prices.ts, method = 'discrete')
#
SMI_monthly <- xts(SMI_monthly[,-1], order.by = as.Date(SMI_monthly$Date, format = "%d.%m.%Y"))
#View(SMI_monthly)
SMI_TotRet_mon <- Return.calculate(SMI_monthly)
#
# # turn interest_rates into ts and divide by 100 because it is in percentages and turn into monthly rates
interest_rates <- xts(interest_rates[,-1], order.by = as.Date(interest_rates$Date,  format = "%d.%m.%Y"))
#View(interest_rates)
interest_rates_mon <- ((1+interest_rates/100)^(1/12)-1)
View(returns)
View(prices.ts)
prices <- read.delim(file = 'A3_dataset_01.txt', header = TRUE, sep = '\t', dec = '.')
SMI_monthly <- read.delim(file = 'A3_dataset_02.txt', header = TRUE, sep = '\t', dec = '.')
interest_rates <- read.delim(file = 'A3_dataset_03.txt', header = TRUE, sep = '\t', dec = '.')
# # create monthly returns for stocks and SMI
date <- as.Date(prices[,1], format = "%d.%m.%Y")
prices.ts <- xts(x = prices[,-1], order.by = date)
#View(prices.ts)
returns <- Return.calculate(prices = prices.ts, method = 'log')
#
SMI_monthly <- xts(SMI_monthly[,-1], order.by = as.Date(SMI_monthly$Date, format = "%d.%m.%Y"))
#View(SMI_monthly)
SMI_TotRet_mon <- Return.calculate(SMI_monthly, method = "log")
#
# # turn interest_rates into ts and divide by 100 because it is in percentages and turn into monthly rates
interest_rates <- xts(interest_rates[,-1], order.by = as.Date(interest_rates$Date,  format = "%d.%m.%Y"))
#View(interest_rates)
interest_rates_mon <- ((1+interest_rates/100)^(1/12)-1)
View(returns)
View(returns)
View(SMI_monthly)
View(SMI_monthly)
View(SMI_TotRet_mon)
View(interest_rates_mon)
market_premium = SMI_TotRet_mon - interest_rates_mon
View(market_premium)
excess_return <- Return.excess(returns, interest_rates_mon)
View(excess_return)
market_premium <- Return.excess(SMI_TotRet_mon, interest_rates_mon)
#regress excess return over
lm(excess_return ~ market_premium)
#regress excess return over
betas <- lm(excess_return ~ market_premium)
betas$model
betas$coefficients
#regress excess return over
betas <- lm(excess_return$`ABB > Rf`~ market_premium)
betas
betas$coefficients
betas$coefficients[1]
betas$coefficients[2]
summary(beta)
summary(betas)
#regress excess return over
betas <- lm(excess_return ~ market_premium)
summary(betas)
#regress excess return over
betas <- lm(excess_return ~ market_premium)
summary(betas)
#regress excess return over
betas <- lm(excess_return$`ABB > Rf` ~ market_premium)
summary(betas)
for i in excess_return:
for (i in excess_return){}
for (i in excess_return){print(i) }
View(excess_return)
for (i in excess_return){print(i) }
for(i in name(excess_retun)){
print(i)
}
for(i in names(excess_retun)){
print(i)
}
for(i in names(excess_return)){
print(i)
for(i in names(excess_return)){
print(i)
}
